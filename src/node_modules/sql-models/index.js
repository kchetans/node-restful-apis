let models      = require('express-cassandra');
let _           = require('lodash');
let Sequelize   = require('sequelize');
let chalk       = require('chalk');
let path        = require('path');
let config      = require('config');
let mysqlConfig = config.get("database").mysql;
let fs          = require("fs");

let readFolderRecursive = require('../../utils/readFolderRecursive');

let db = {};

exports.db   = db;
exports.init = function init() {
    let {username, password, database, host, port} = mysqlConfig;
    return new Promise((resolve, reject) => {
        console.log(chalk.yellow(`connecting to MySQl at host ${host} on ${port} via database ${database}`));
        let sequelize = new Sequelize(database, username, password, {
            host   : host,
            dialect: 'mysql',
            pool   : {
                max : 5,
                min : 0,
                idle: 10000
            },
            define : {
                timestamps: false
            }
        });

        sequelize.authenticate()
            .then(success => {
                console.log(chalk.green(`  âœ… connected to MySQL via database ${database}`));
            })
            .then(success => {
                console.log(chalk.green(`Reading SQL Models...`));
                return readFolderRecursive(__dirname)
            })
            .then(files => {

                _.filter(files, file => file.indexOf(".") !== 0 && (!file.includes("index.js")))
                    .forEach(file => {
                        file           = file.substring(__dirname.length);
                        let model      = sequelize.import(path.join(__dirname, file));
                        db[model.name] = model;
                    });

                console.log(chalk.green(`  âœ… Reading SQL Models done`));

                Object.keys(db).forEach(function (modelName) {
                    if ("associate" in db[modelName]) {
                        db[modelName].associate(db);
                    }
                });

                db.sequelize = sequelize;
                db.Sequelize = Sequelize;
                resolve(true);
            }).catch(function (err) {
            console.log(chalk.red('***************Error in MySQL initialisation ***************', err.message));
            console.log("err => ", err);
            reject(true);
        });
    });
};
