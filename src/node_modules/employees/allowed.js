let models = require('sql-models');
let _includes = require("_includes");
let sequelize = require('sequelize');
exports = {
  async get_allowed_employees(user_id){
    // console.log("user_id",user_id)
    // user_id=52;
    let roles = await models.db.vw_roles.findAll({
      attributes:['role_code'],
      where: {
        user_id: user_id
      },
      raw: true
    })
    // console.log("roles",roles)
    let options = await models.db.vw_data_types.findAll({
      attributes:['option', 'value'],
      where: {
        user_id: user_id,
        $or: roles,
        data_type: 'employees'
      },
      raw: true
    })
    // console.log("options",options)
    let default_option = await models.db.wx_auth_data_types.findAll({
      attributes:[['default_value','option']],
      where: {
        data_type: 'employees'
      },
      raw: true
    })
    let all_options = options.concat(default_option)
    // let facilities = []
    let where = {
      $or: []
    }
    for(var i=0;i<all_options.length;i++){
      let option = all_options[i].option;
      switch(option){
        case 'none':
          where.$or.push({
            emp_id:{
              lte:0
            }
          })
          break;
        case 'constant':
          where.$or.push({
            emp_id:options[i].value
          })
          break;
        case 'pe_self_le':
          let self_le = await models.db.employees.findAll({
            attributes:[['le_id','pe_le_id']],
            where:{
              user_id: user_id
            },
            raw:true
          })
          where.$or.push({
            $or: self_le
          })
          break;
        case 'juniors':
          let self_empids = await models.db.employees.findAll({
            attributes:[['emp_id','emp_id']],
            where:{
              user_id: user_id
            },
            raw:true
          })
          // console.log('self_pids',self_pids)
          let self_empid = '-1'
          for(var j=0;j<self_empids.length;j++){
            self_empid += ',' + self_empids[j].emp_id;
          }
          let jr_empids = await _includes.seq_db.seq_raw(
              'CALL jnr_emps("'+ self_empid +'");',
              { type: sequelize.QueryTypes.SELECT}
          )
          // console.log('jr_pids',jr_pids)
          if(jr_empids[0][0].jr_employees){
            where.$or.push(
              sequelize.fn('FIND_IN_SET', sequelize.col('emp_id'), jr_empids[0][0].jr_employees )
            )
          }
          break;
      }
    }
    // console.log("where",  where)
    return where;
  },
};

module.exports = exports;
