// let models = require('cassandra-models').models();
let models = require('express-cassandra');

class User {

    constructor(param) {
    }

    setUserName(name) {
        this.userName = name;
        return this;
    }

    getUserName() {
        return this.userName;
    }

    setDisplayName(name) {
        this.displayName = name;
        return this;
    }

    getDisplayName() {
        return this.displayName;
    }

    setMobileNo(mobileNo) {
        this.mobileNo = mobileNo;
        return this;
    }

    getMobileNo() {
        return this.mobileNo;
    }

    setMobileNo2(mobileNo2) {
        this.mobileNo2 = mobileNo2;
        return this;
    }

    getMobileNo2() {
        return this.mobileNo2;
    }

    setEmailId(emailID) {
        this.emailID = emailID;
        return this;
    }

    getEmailId() {
        return this.emailID
    }

    setEmailId2(emailID2) {
        this.emailID2 = emailID2;
        return this;
    }

    getEmailId2() {
        return this.emailID2
    }

    setIsActive(isActive) {
        this.isActive = isActive;
        return this;
    }

    getIsActive() {
        return this.isActive || true;
    }

    setDisplayUrl(displayUrl) {
        this.displayUrl = displayUrl;
        return this;
    }

    getDisplayUrl() {
        return this.displayUrl;
    }

    // Cred Model
    setUserPin(pin) {
        this.pin = pin;
        return this;
    }

    getUserPin() {
        return this.pin;
    }

    setUserPassword(password) {
        this.password = password;
        return this;
    }

    getUserPassword() {
        return this.password;
    }

    beforeSave() {
        //Check Mobile No.
    }

    async  save() {
        let userID = models.timeuuid();
        try {
            await new models.instance.AuthUsers({
                user_id       : userID,
                user_name     : this.getUserName(),
                display_name  : this.getDisplayName(),
                display_pic   : this.getDisplayUrl(),
                is_active     : this.getIsActive(),
                mobile        : models.datatypes.Long.fromString(this.getMobileNo()),
                mobile2       : this.getMobileNo2(),
                work_email    : this.getEmailId(),
                personal_email: this.getEmailId2(),
            }).saveAsync();
            console.log("SAVE In ONE TABLE => ");

            /**
             * Save remaining entries async
             */
            if (this.getMobileNo()) {
                new models.instance.AuthUserCredentials({
                    key     : this.getMobileNo(),
                    key_type: "mobile",
                    password: this.getUserPassword(),
                    pin     : this.getUserPin(),
                    user_id : userID
                }).saveAsync();
                console.log("SAVE In ONE TABLE 2=>1 ");
            }
            if (this.getUserName()) {
                new models.instance.AuthUserCredentials({
                    key     : this.getUserName(),
                    key_type: "userName",
                    password: this.getUserPassword(),
                    pin     : this.getUserPin(),
                    user_id : userID
                }).saveAsync();

                console.log("SAVE In ONE TABLE 2=>2 ");
            }
            if (this.getEmailId()) {
                new models.instance.AuthUserCredentials({
                    key     : this.getEmailId(),
                    key_type: "email",
                    password: this.getUserPassword(),
                    pin     : this.getUserPin(),
                    user_id : userID
                }).saveAsync();
                console.log("SAVE In ONE TABLE 2=>3 ");
            }
            console.log("SAVED ALL => ");
        } catch (err) {
            console.log("************ROLL BACK************");
            console.log("err => ", err);
            return err.message;
        }

    }

    async getUserFromKey(key) {
        return await this.__getUserCredentialFromKey('key', key);
    }

    getUserFromMobile(mobileNo) {
        return this.__getUserFromKey('mobile', mobileNo);
    }

    getUserByName(userName) {
        return this.__getUserFromKey('user_name', userName);
    }

    getUserByID(user_id) {
        if (typeof  user_id === 'string') {
            user_id = models.timeuuidFromString(user_id);
        }
        return this.__getUserFromKey('user_id', user_id);
    }

    async __getUserFromKey(dbKey, value) {
        let result = await models.instance.AuthUsers.findOneAsync({[dbKey]: value});
        if (result)
            this.user = Object.assign({}, this.user, result.toJSON());
        return this.user;
    };

    async  __getUserCredentialFromKey(dbKey, value) {
        let result = await models.instance.AuthUserCredentials.findOneAsync({[dbKey]: value});
        if (result)
            this.user_cred = Object.assign({}, this.user_cred, result.toJSON());
        return this.user_cred;
    };

}

exports.userClass = User;
