let models = require('../cs_db').cass_connection();
let message = require('./message_lib');
let sendJsonResponse = message.sendJsonResponse;
let internalJsonResponse = message.internalJsonResponse;

module.exports.checkOrganisationByCode = function (org_code) {
    return new Promise(function (resolve, reject) {
        let response = {}
        models.instance.Organisations.findOneAsync({org_code: org_code})
            .then(function (org) {
                response = internalJsonResponse('200', org.toJSON());
                resolve(response);
            })
            .catch(function (err) {
                response = internalJsonResponse('400', {}, message.ErrorMessage.err400(err.message));
                reject(response);
            });
    })
};

module.exports.checkOrganisationById = function (org_id) {
    return new Promise(function (resolve, reject) {
        models.instance.Organisations.findOne({org_id: org_id}, {materialized_view: 'orgs_by_id'}, function (err, org) {
            let response = {}
            if (err) {
                response = internalJsonResponse('400', {}, message.ErrorMessage.err400(err.message));
                reject(response);
            }
            else {
                if (!org)
                    reject(internalJsonResponse('400', {}, message.ErrorMessage.err400('operation not allowed: org id not found')))
                else {
                    response = internalJsonResponse('200', org.toJSON());
                    resolve(response);
                }
            }
        });
    });
};


checkOrganisationAndOrgUnitAndEntity = function (ou, ou_ent_name) {
    return new Promise(function (resolve, reject) {
        models.instance.OrganisationStructure.find({
                org_id: ou.org_id,
                ou_id: ou.ou_id
            }, {
                select: ['ou_ent_name']
            }, function (err, ou_entity) {
                if (err)
                    reject(internalJsonResponse('400', {}, message.ErrorMessage.err400(err.message)));
                else {
                    let arr = ou_entity.map(function (ent) {
                        return ent.ou_ent_name == ou_ent_name
                    });
                    resolve(arr)
                }
            }
        );
    })
}


module.exports.checkOrganisationAndOrgUnit = function (org_id, ou_code, ou_ent_name) {
    return new Promise(function (resolve, reject) {
        models.instance.OrganisationUnitTypes.findOne({
            org_id: org_id,
            ou_code: ou_code
        }, function (err, ou_unit) {
            let response = {}
            if (err)
                reject(internalJsonResponse('400', {}, message.ErrorMessage.err400(err.message)));
            else {
                if (!ou_unit)
                    reject(internalJsonResponse('400', {}, message.ErrorMessage.err400('operation not allowed: org_id + ou_code not found')));
                else {
                    checkOrganisationAndOrgUnitAndEntity(ou_unit.toJSON(), ou_ent_name)
                        .then(output => {
                            if (output.includes(true))
                                reject(internalJsonResponse('400', {}, message.Message.entityAlreadyExists(ou_ent_name)));
                            else {
                                response = internalJsonResponse('200', ou_unit.toJSON());
                                resolve(response);
                            }
                        })
                        .catch(issue => {
                            reject(internalJsonResponse('400', {}, issue));
                        });
                }
            }
        });
    });
};


module.exports.checkOrganisationUnitPosition = function (ou_ent) {

    models.instance.OrganisationUnitPositions.find({
        org_id: ou_ent.org_id,
        ou_id: ou_ent.ou_id,
        ou_pos_name: ou_ent.ou_ent_head_pos
    }, function (err, result) {
        if (err) {
            console.log('[error] : ', err.message);
        } else {
            console.log('what is happening here ', result);
            if (result.length > 0 || !result)
                console.log('position already exists for the OU')
            else {
                let _ou_ent_pos = new models.instance.OrganisationUnitPositions({});
                _ou_ent_pos.org_id = ou_ent.org_id;
                _ou_ent_pos.ou_id = ou_ent.ou_id;
                _ou_ent_pos.ou_pos_name = ou_ent.ou_ent_head_pos;
                _ou_ent_pos.access_level = 100; //todo
                _ou_ent_pos.org_name = ou_ent.org_name;
                _ou_ent_pos.ou_code = ou_ent.ou_code;
                _ou_ent_pos.ou_pos_id = models.timeuuid();
                _ou_ent_pos.ou_par_pos_id = _ou_ent_pos.ou_pos_id;   //todo
                _ou_ent_pos.ou_pos_count = 1; //todo


                _ou_ent_pos.save(function (err) {
                    if (err)
                        console.log('[error] : ', err.message);
                    else {
                        console.log('[saving the position for the entity]', _ou_ent_pos.toJSON());
                        exports.checkAndCreateEmployee(ou_ent, _ou_ent_pos);
                        return _ou_ent_pos.toJSON();
                    }
                });
            }
        }
    });
};

module.exports.checkAndCreateEmployee = function (ou_ent, ou_pos) {

    models.instance.OrganisationEmployees.find({
        org_id: ou_ent.org_id,
        ou_ent_id: ou_ent.ou_ent_id,
        ou_pos_id: ou_pos.ou_pos_id,
        user_id: models.timeuuid()
    }, function (err, result) {
        if (err) {
            console.log('[error] : ', err.message);
        } else {
            if (result.length > 0 || !result)
                console.log('employee already exists for the entity')
            else {
                {

                }
                let _org_emp = new models.instance.OrganisationEmployees({});
                _org_emp.org_id = ou_ent.org_id;
                _org_emp.ou_ent_id = ou_ent.ou_ent_id;
                _org_emp.ou_pos_id = ou_pos.ou_pos_id;
                _org_emp.user_id = models.timeuuid(); //todo
                _org_emp.emp_boss_id = models.timeuuid(); //todo
                _org_emp.emp_boss_name = 'Chirag'; //todo
                _org_emp.emp_id = models.timeuuid();
                _org_emp.ou_pos_name = ou_ent.ou_ent_head_pos;
                _org_emp.ou_ent_name = ou_ent.ou_ent_name;
                _org_emp.user_full_name = ou_ent.ou_ent_head.join();
                // _org_emp.
                // _org_emp.ou_id = ou_ent.ou_id;
                // _org_emp.ou_pos_name = ou_ent.ou_ent_head_pos;
                // _org_emp.access_level = 100; //todo
                // _org_emp.org_name = ou_ent.org_name;
                // _org_emp.ou_code = ou_ent.ou_code;
                // _org_emp.ou_pos_id = models.timeuuid();
                // _org_emp.ou_par_pos_id = _org_emp.ou_pos_id;   //todo
                // _org_emp.ou_pos_count = 1 //todo

                _org_emp.save(function (err) {
                    if (err)
                        console.log('[error] : ', err.message);
                    else {
                        console.log('[saving the employee for the entity]', _org_emp.toJSON());
                        return _org_emp.toJSON();
                    }
                });
            }
        }
    });

}