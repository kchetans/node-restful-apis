let errors = require('errors');

/**
 *
 * @param res
 * @param status
 * @param content
 * @param message
 */
module.exports.sendJsonResponse = function (res, status, content, message) {
    res.status(status);
    let response = {
        data: content,
        message: message ? message : 'OK'
    };
    res.json(response);
};

module.exports.internalJsonResponse = function (status, content, message) {
    let response = {
        status: status,
        data: content,
        message: message ? message : 'OK'
    };
    return response;
};


/**
 *
 */
class Messages {
    /**
     *
     * @param entity
     * @constructor
     */
    static EntityAlreadyExists(entity) {
        errors.create({
            name: 'EntityAlreadyExists',
            defaultMessage: 'Please check the ' + entity + ' - you are creating',
            code: '200',
            defaultExplanation: 'The file /home/boden/foo could not be found',
            defaultResponse: 'Verify the file exists and retry the operation'
        });
        return new errors.EntityAlreadyExists().toJSON();
    }

    /**
     *
     * @param entity
     * @constructor
     */
    static NoEntityFound(entity) {
        errors.create({
            name: 'NoEntityFound',
            defaultMessage: 'No ' + entity + ' found !',
            code: '200',
            defaultExplanation: 'The file /home/boden/foo could not be found',
            defaultResponse: 'Verify the file exists and retry the operation'
        });
        return new errors.NoEntityFound().toJSON();
    }
}

/**
 *
 * @type {{entityAlreadyExists: exports.Message.entityAlreadyExists, noEntityFound: exports.Message.noEntityFound}}
 */
module.exports.Message = {
    /**
     *
     * @param entity
     * @returns {*}
     */
    entityAlreadyExists: function (entity) {
        return Messages.EntityAlreadyExists(entity);
    },
    /**
     *
     * @param entity
     * @returns {*}
     */
    noEntityFound: function (entity) {
        return Messages.NoEntityFound(entity);
    }
};

/**
 *
 * @type {{err400: exports.ErrorMessage.err400, err404: exports.ErrorMessage.err404, err401: exports.ErrorMessage.err401}}
 */
module.exports.ErrorMessage = {
    /**
     *
     * @param msg
     */
    err400: function (msg) {
        return new errors.Http400Error({message: msg}).toJSON();
    },
    /**
     *
     * @param msg
     */
    err404: function (msg) {
        return new errors.Http404Error({message: msg}).toJSON();
    },
    /**
     *
     * @param msg
     */
    err401: function (msg) {
        return new errors.Http401Error({message: msg}).toJSON();
    }
};