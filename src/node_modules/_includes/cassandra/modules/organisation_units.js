/**
 * Created by mysterio86 on 17/3/17.
 */
let models = require('../cs_db').cass_connection();
let message = require('./message_lib');
let sendJsonResponse = message.sendJsonResponse;
let validationfns = require('./validation_fns');
/**
 *
 * @param req
 * @param res
 */
module.exports.getAllOrganisationUnits = function (req, res) {

    models.instance.OrganisationUnitTypes.find({org_id: models.timeuuidFromString(req.params.org_id)}, function (err, results) {
        var obj = [];
        try {
            results.forEach(function (result, index) {
                obj.push(result.toJSON());
            });
            if (obj.length == 0)
                sendJsonResponse(res, '200', {}, message.Message.noEntityFound('Organisation Units'));
            else
                sendJsonResponse(res, '200', obj);
        } catch (err) {
            sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
        }
    });
};

/**
 *
 * @param req
 * @param res
 */
module.exports.getAllActiveOrganisationUnits = function (req, res) {

    models.instance.OrganisationUnitTypes.find({
        org_id: models.timeuuidFromString(req.params.org_id),
        is_active: true
    }, {materialized_view: 'ous_by_status'}, function (err, results) {
        var obj = [];
        results.forEach(function (result, index) {
            obj.push(result.toJSON());
        });

        if (obj.length == 0)
            sendJsonResponse(res, '200', {}, message.Message.noEntityFound('Active Organisation Units for : org id - ' + models.timeuuidFromString(req.params.org_id)));
        else
            sendJsonResponse(res, '200', obj);
    });
};

/**
 *
 * @param req
 * @param res
 */
module.exports.createOrganisationUnit = function (req, res) {
    if (!req.params && !req.params.org_id)
        sendJsonResponse(res, '404', {}, message.ErrorMessage.err404('url is incorrect - org_id'));
    else if(!req.params && !req.params.org_id && req.body.ou_code)
        sendJsonResponse(res, '404', {}, message.ErrorMessage.err404('url is incorrect - ou_code'));
    else {
        findOrganisationUnitByCode(req, res, checkAndCreateOrganisationUnit);
    }
};


/**
 *
 * @param req
 * @param res
 */
module.exports.deleteOrganisationUnitByCode = function (req, res) {
    if (!req.params && !req.params.org_id && !req.params.ou_code)
        sendJsonResponse(res, '401', {}, message.ErrorMessage.err401('url not found'));
    else {
        let org_id = models.timeuuidFromString(req.params.org_id.trim());
        let ou_code = req.params.ou_code.trim();
        let query_object = {org_id: org_id, ou_code: ou_code};
        let update_values_object = {is_active: false};
        let options = {if_exists: true};

        models.instance.OrganisationUnitTypes.updateAsync(query_object, update_values_object, options)
            .then(function (org) {
                sendJsonResponse(res, '200', org);
            })
            .catch(function (err) {
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            });
    }
};

/**
 *
 * @param req
 * @param res
 */
module.exports.enableOrganisationUnitByCode = function (req, res) {
    if (!req.params && !req.params.org_id && !req.params.ou_code)
        sendJsonResponse(res, '401', {}, message.ErrorMessage.err401('url not found'));
    else {
        let org_id = models.timeuuidFromString(req.params.org_id.trim());
        let ou_code = req.params.ou_code.trim();
        let query_object = {org_id: org_id, ou_code: ou_code};
        let update_values_object = {is_active: true};
        let options = {if_exists: true};

        models.instance.OrganisationUnitTypes.updateAsync(query_object, update_values_object, options)
            .then(function (org) {
                sendJsonResponse(res, '200', org);
            })
            .catch(function (err) {
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            });
    }
};

/**
 *
 * @param req
 * @param res
 * @param ou
 */
function checkAndCreateOrganisationUnit(req, res, ou) {
    if (ou) {
        sendJsonResponse(res, '200', ou.toJSON(), message.Message.entityAlreadyExists('org. unit'));
    } else {
        let obj = {
            org_id: models.timeuuidFromString(req.params.org_id),
            ou_code: req.body.ou_code.trim(),
            ou_name: req.body.ou_name.trim(),
            ou_description: req.body.ou_description.trim(),
            org_name: req.body.org_name.trim(),
            is_active: true,
            created_by: models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331'),
            updated_by: models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331')
        };

        let _ou = new models.instance.OrganisationUnitTypes(obj);
        _ou.save({if_not_exists: true}, function (err) {
            if (err) {
                console.log("[err] ", err.message);
                sendJsonResponse(res, '404', {}, message.ErrorMessage.err400(err.message));
            } else
                sendJsonResponse(res, '200', _ou.toJSON());
        });
    }
}

/**
 *
 * @param req
 * @param res
 * @param callback
 */
function findOrganisationUnitByCode(req, res, callback) {
    let org_id = models.timeuuidFromString(req.params.org_id.trim());
    validationfns.checkOrganisationById(org_id)
        .then(result => {
            let unit = models.instance.OrganisationUnitTypes
                .findOne({
                    org_id: org_id,
                    ou_code: req.body.ou_code.trim()
                }, function (err, ou) {
                    if (err)
                        sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
                    else {
                        callback(req, res, ou);
                    }
                });
        })
        .catch(err => {
            sendJsonResponse(res, '400', {}, err);
        });
    // console.log(validate_org_id);
    // sendJsonResponse(res, '202', validate_org_id);
    // return
}