/**
 * Created by mysterio86 on 17/3/17.
 */
let models = require('../cs_db').cass_connection();
let message = require('./message_lib');
let sendJsonResponse = message.sendJsonResponse;
let validationfns = require('./validation_fns');
const HEAD = 'Head';
// var sendJsonResponse = function (res, status, content, message) {
//     res.status(status);
//     let response = {
//         data: content,
//         message: message ? message : 'OK'
//     };
//     res.json(response);
// };


/* API LISTINGS */
module.exports.createOrganisation = function (req, res) {
    if (!req.body) {
        sendJsonResponse(res, '400', {}, message.ErrorMessage.REQUEST_BODY_NOT_FOUND);
    }
    else {
        try {
            findOrganisation(req, res, checkAndCreateOrganisations);
        } catch (e) {
            sendJsonResponse(res, '400', {}, e.message);
        }
    }
};

module.exports.getAllOrganisations = function (req, res) {
    var obj = [];
    models.instance.Organisations.find({}, function (err, results) {
        if (err)
            sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
        else {
            if (results.length === 0)
                sendJsonResponse(res, '200', {}, message.Message.noEntityFound('Organisation'));
            else {
                results.forEach(function (result, index) {
                    obj.push(result.toJSON());
                });
                sendJsonResponse(res, '200', obj);
            }
        }
    });
};

module.exports.getAllActiveOrganisations = function (req, res) {
    var obj = [];
    models.instance.Organisations.find({is_active: true}, {materialized_view: 'orgs_by_status'}, function (err, results) {
        if (err)
            sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
        else {
            if (results.length === 0)
                sendJsonResponse(res, '200', {}, message.Message.noEntityFound(']Organisation'));
            else {
                results.forEach(function (result, index) {
                    obj.push(result.toJSON());
                });
                sendJsonResponse(res, '200', obj);
            }
        }
    });
};

module.exports.getOrganisationByCode = function (req, res) {
    if (!req.params && !req.params.org_code)
        sendJsonResponse(res, '401', {}, message.ErrorMessage.err400('url not found: org_code missing'));
    else {
        let org_code = req.params.org_code.trim();
        models.instance.Organisations.findOneAsync({org_code: org_code})
            .then(function (org) {
                sendJsonResponse(res, '200', org.toJSON());
            })
            .catch(function (err) {
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            });
    }
};

module.exports.getOrganisationById = function (req, res) {
    if (!req.params && !req.params.id)
        sendJsonResponse(res, '401', {}, message.ErrorMessage.err400('url not found: org_id missing'));
    else {
        models.instance.Organisations.findOne({org_id: models.timeuuidFromString(req.params.org_id)}, {materialized_view: 'orgs_by_id'}, function (err, org) {
            if (err)
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            else {
                if(org)
                    sendJsonResponse(res, '200', org.toJSON());
                else
                    sendJsonResponse(res, '401', {}, message.ErrorMessage.err400('for : org_id '  + models.timeuuidFromString(req.params.org_id) + 'no organisation found'));
            }
        })
    }
};

module.exports.deleteOrganisationByCode = function (req, res) {

    if (!req.params && !req.params.org_code)
        sendJsonResponse(res, '401', {}, message.ErrorMessage.err401('url not found: org_code missing'));
    else {
        let org_code = req.params.org_code.trim();
        let org_name = req.body.org_name.trim();
        let query_object = {org_code: org_code, org_name: org_name};
        let update_values_object = {is_active: false};
        let options = {if_exists: true};

        models.instance.Organisations.updateAsync(query_object, update_values_object, options)
            .then(function (org) {
                sendJsonResponse(res, '200', org);
            })
            .catch(function (err) {
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            });
    }
};

module.exports.activateOrganisationByCode = function (req, res) {

    if (!req.params && !req.params.org_code)
        sendJsonResponse(res, '401', {}, message.ErrorMessage.err400('url not found: org_code missing'));
    else {
        let org_code = req.params.org_code.trim();
        let org_name = req.body.org_name.trim();
        let query_object = {org_code: org_code, org_name: org_name};
        let update_values_object = {is_active: true};
        let options = {if_exists: true};

        models.instance.Organisations.updateAsync(query_object, update_values_object, options)
            .then(function (org) {
                sendJsonResponse(res, '200', org);
            })
            .catch(function (err) {
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            });
    }
};
/* API LISTINGS */


function savePromisified(org, ou, ou_pos, ent, employee) {
    return new Promise(function (resolve, reject) {
        let emp = new models.instance.OrganisationEmployees({});
        emp.org_id = org.org_id;
        emp.ou_ent_id = ent.ou_ent_id;
        emp.ou_pos_id = ou_pos.ou_pos_id;
        emp.user_id = models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331');
        emp.emp_id = models.timeuuid();
        emp.emp_boss_id = emp.emp_id;
        emp.emp_boss_name = employee.trim();
        emp.ou_ent_name = org.org_name;
        emp.ou_pos_name = ou_pos.ou_pos_name;
        emp.user_full_name = employee.trim();
        emp.save(function (err) {
            if (err)
                reject(err);
            else
                resolve(emp.toJSON());
        });
    })
}

function createStructureAndEmployees(org, ou, ou_pos) {
    let ent = new models.instance.OrganisationStructure({});
    ent.ou_ent_id = models.timeuuid();
    ent.ou_ent_pid = ent.ou_ent_id;
    ent.org_id = org.org_id;
    ent.ou_id = ou.ou_id;
    ent.ou_ent_code = ou.ou_code+ '_0';
    ent.ou_ent_name = org.org_name;
    ent.ou_ent_pname = ent.ou_ent_name;
    ent.org_name = org.org_name;
    ent.ou_code = ou.ou_code;
    ent.ou_ent_desc = org.org_description;
    ent.ou_ent_head = org.org_head.trim().split(',');
    ent.ou_ent_head_pos = ou_pos.ou_pos_name;
    ent.ou_ent_no_pos = ou_pos.ou_pos_count;
    ent.ou_level = 0;
    ent.save(function (err) {
        if (err)
            console.log('[err : entity creation] ', err.message);
        else
            console.log('[entity organisation :' + ent.ou_ent_name + ' ] created');
    });

    let heads = JSON.parse(JSON.stringify(org));

    heads.org_head.trim().split(',').forEach(function (employee, indx) {
        savePromisified(org, ou, ou_pos, ent, employee)
            .then(result => {
                console.log(result);
            })
            .catch(err => {
                console.log(err);
            })
    });
}

function checkAndCreateOrganisations(req, res, org) {
    let _org_obj = {}
    if (!org) {
        _org_obj = {
            org_id: models.timeuuid(),
            org_name: req.body.org_name.trim(),
            org_code: req.body.org_code.trim(),
            org_description: req.body.org_description.trim(),
            org_type: req.body.org_type.trim(),
            created_by: models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331'),
            updated_by: models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331'),
            org_alias: req.body.org_code.trim(),
            is_active: true,
            org_head: req.body.org_head.trim(),
        };
        var _org = new models.instance.Organisations(_org_obj);
        var _ou = new models.instance.OrganisationUnitTypes({});
        _ou.ou_id = models.timeuuid();
        Object.keys(_ou).forEach(function (key, index) {
            if (_org[key])
                _ou[key] = _org[key]
        });
        _ou_keys_xtra = Object.keys(models.modelInstance['Organisations']._properties.schema.org_ou);
        _ou_keys_xtra.forEach(function (key, index) {
            _ou[key] = models.modelInstance['Organisations']._properties.schema.org_ou[key]
        });
        _org.save({if_not_exist: true}, function (err) {
            if (err)
                sendJsonResponse(res, '401', err.message);
            else {
                _ou.save({if_not_exist: true}, function (err_unit) {
                    if (err_unit)
                        sendJsonResponse(res, '401', err_unit.message);
                    else {
                        console.log('creating the ou unit for the org');
                        let _ou_pos = new models.instance.OrganisationUnitPositions({});
                        _ou_pos.ou_pos_id = models.timeuuid();
                        _ou_pos.ou_par_pos_id = _ou_pos.ou_pos_id;
                        _ou_pos.org_id = _org_obj.org_id;
                        _ou_pos.is_active = true;
                        _ou_pos.ou_id = _ou.ou_id;
                        _ou_pos.ou_pos_name = req.body.ou_pos_name.trim();
                        _ou_pos.org_name = _org.org_name;
                        _ou_pos.access_level = 100;
                        _ou_pos.ou_code = _ou.ou_code;
                        _ou_pos.ou_pos_count = _org.org_head.trim().split(',').length;

                        _ou_pos.save({if_not_exist: true}, function (err_pos) {
                            if (err_pos)
                                sendJsonResponse(res, '401', err_pos.message);
                            else {
                                createStructureAndEmployees(_org, _ou, _ou_pos);
                                console.log('creating the ou postions for the org unit');
                            }
                        });
                    }
                });
                sendJsonResponse(res, '201', _org);
            }
        });
    } else {
        _org_obj = org;
        sendJsonResponse(res, '200', _org_obj, message.Message.entityAlreadyExists('organisation'));
    }
}

function checkOrganisationCodeExists(req, res, callback) {
    let code = req.body.org_code.trim();
    models.instance.Organisations
        .findOneAsync({
            org_code: code
        })
        .then(function (org) {
            if (org) {
                let msg = 'code : ' + code + ' - is already assigned to : ' + org.org_name;
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(msg));
            }
            else
                callback(req, res, org);
        })
        .catch(function (err) {
            sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
        });
};

function findOrganisation(req, res, callback) {
    let code = req.body.org_code.trim();
    let name = req.body.org_name.trim();
    let _obj = {};
    _obj.exists = false;
    models.instance.Organisations
        .findOneAsync({
            org_code: code,
            org_name: name
        })
        .then(function (org) {
            console.log('checking the name and the code for the organisation');
            if (org) {
                _obj.exists = true;
                _obj.data = org.toJSON();
                callback(req, res, org);
            } else {
                checkOrganisationCodeExists(req, res, callback);
            }
        })
        .catch(function (err) {
            sendJsonResponse(res, '400', {}, err.message);
        });
}

module.exports.findPerson = function (req, res) {
    console.log('I am trying to find the Person');
    models.instance.Person.findOne({}, function (err, john) {
        console.log('Found ' + john.name + ' to be ' + john.age + ' years old!');
    });

    models.instance.Person.findOne({name: 'Mary'}, function (err, john) {
        if (err) {
            console.log(err);
            return;
        }
        //Note that returned variable john here is an instance of your model,
        //so you can also do john.delete(), john.save() type operations on the instance.
        console.log('Found ' + john.name + ' to be ' + john.age + ' years old!');
        sendJsonResponse(res, '202', john);
    });
}

function createPerson() {
    var john = new models.instance.Person({
        name: "John",
        surname: "Doe",
        age: 32
    });

    john.save(function (err) {
        if (err) {
            console.log(err);
            return;
        }
        console.log('Yuppiie!');
    });
}