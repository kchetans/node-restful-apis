/**
 * Created by mysterio86 on 20/3/17.
 */
var models = require('../cs_db').cass_connection();
let message = require('./message_lib');
let sendJsonResponse = message.sendJsonResponse;
let validationfns = require('./validation_fns');
module.exports.getAllOrganisationEntities = function (req, res) {

    if (!req.params && !req.params.org_id)
        sendJsonResponse(res, '404', {}, message.ErrorMessage.err404('url is incorrect - org_id'));

    var obj = [];
    models.instance.OrganisationStructure.find({org_id: models.timeuuidFromString(req.params.org_id)}, function (err, results) {
        if (err)
            sendJsonResponse(res, '404', {err: err.message});
        else {
            if (!results)
                sendJsonResponse(res, '400', {}, message.Message.noEntityFound('organisation units'));
            else {
                results.forEach(function (result, index) {
                    obj.push(result.toJSON());
                });
                sendJsonResponse(res, '200', obj);
            }
        }
    });
};

module.exports.createOrganisationEntity = function (req, res) {
    if (!req.params && !req.params.org_id)
        sendJsonResponse(res, '400', {}, message.ErrorMessage.err400('incorrect url: org_id issue'));
    else if (!req.params && !req.params.org_id && !req.params.ou_code) {
        sendJsonResponse(res, '400', {}, message.ErrorMessage.err400('incorrect url: ou_code issue'));
    }
    else {
        findOrganisationUnitEntityByCode(req, res, checkAndCreateOrganisationEntity)
    }
};

function createOuEntityCode(result) {
    return new Promise(function (resolve, reject) {
        let org_id = result.data.org_id;
        let ou_id = result.data.ou_id;
        models.instance.OrganisationStructure.find({
                org_id: org_id,
                ou_id: ou_id
            }, {
                select: ['count(org_id) as cnt']
            },
            function (err, ou_unit) {
                let resp = {};
                if (err) {
                    resp = message.internalJsonResponse('400', {}, err.message);
                    reject(resp);
                }
                else {
                    let ou_ent_code = result.data.ou_code + '_' + ou_unit[0].cnt;
                    resp = message.internalJsonResponse('200', {code: ou_ent_code});
                    resolve(resp);
                }
            });
    });
}

function findOrganisationUnitEntityByCode(req, res, callback) {
    try {
        let org_id = models.timeuuidFromString(req.params.org_id);
        let ou_code = req.params.ou_code.trim();
        let ou_ent_name = req.body.ou_ent_name;
        validationfns.checkOrganisationAndOrgUnit(org_id, ou_code, ou_ent_name)
            .then(result => {
                createOuEntityCode(result)
                    .then(ou_ent_code => {
                        let unit = models.instance.OrganisationStructure
                            .findOne({
                                org_id: result.data.org_id,
                                ou_id: result.data.ou_id,
                                ou_ent_code: ou_ent_code.data.code
                            }, function (err, ou_ent) {
                                if (err)
                                    sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
                                else {
                                    /*sending the parent */
                                    result.data.ou_ent_code = ou_ent_code.data.code;
                                    callback(req, res, ou_ent, result);
                                }
                            });
                    })
                    .catch(error => {
                        sendJsonResponse(res, '403', {}, error);
                    })
            })
            .catch(err => {
                sendJsonResponse(res, '400', {}, err);
            });
    } catch (err) {
        sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
    }
}

function checkAndCreateOrganisationEntity(req, res, ou_ent, result) {
    if (ou_ent) {
        sendJsonResponse(res, '200', ou_ent, message.Message.entityAlreadyExists('Organisation Entity'));
    } else {
        let obj = {
            org_id: result.data.org_id,
            ou_id: result.data.ou_id,
            ou_ent_code: result.data.ou_ent_code,
            ou_ent_id: models.timeuuid(),
            is_active: true,
            ou_pos_id: models.timeuuid(),
            ou_level: parseInt(req.body.ou_level),
            ou_ent_name: req.body.ou_ent_name,
            ou_ent_pid: models.timeuuidFromString(req.body.ou_ent_pid),//todo
            ou_ent_pname: req.body.ou_ent_pname,
            ou_ent_desc: req.body.ou_ent_desc,
            ou_ent_head_pos: req.body.ou_ent_head_pos,
            ou_ent_head: req.body.ou_ent_head.split(','),
            ou_ent_no_pos: parseInt(req.body.ou_ent_no_pos),
            org_name: req.body.org_name,
            ou_code: req.body.ou_code,
            created_by: models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331'),
            updated_by: models.timeuuidFromString('810d7c80-0a22-11e7-971e-036b8157e331')
        };
        let _ou_ent = new models.instance.OrganisationStructure(obj);
        _ou_ent.save(function (err) {
            if (err)
                sendJsonResponse(res, '400', {}, message.ErrorMessage.err400(err.message));
            else {
                sendJsonResponse(res, '200', _ou_ent.toJSON());
                validationfns.checkOrganisationUnitPosition(_ou_ent);
            }
        });
    }
}