let models = require('sql-models');

let FunctionList = {

    async getAllOLRs(attributes, auth_user_id, paging){
        let {currentPage, pageSize} = paging || {};
        // console.log("paging => ", paging);
        let key = attributes.key || ""
        return await models.db.olrs.findAll(
            {
                where : {
                    $or: [
                        {
                            fname: {
                                $like: '%' + key + '%'
                            }
                        },
                        {
                            mobile: {
                                $like: '%' + key + '%'
                            }
                        },
                        {
                            lname: {
                                $like: '%' + key + '%'
                            }
                        }
                    ]
                },
                limit : pageSize ? parseInt(`${pageSize}`) : undefined,
                offset: currentPage ? parseInt(currentPage) * parseInt(pageSize) : undefined,
            });
    },
    async getPageCount(attributes, auth_user_id, pageSize){
        let key   = attributes.key || ""
        let count = await models.db.olrs.count({
            where: {
                $or: [
                    {
                        fname: {
                            $like: '%' + key + '%'
                        }
                    },
                    {
                        mobile: {
                            $like: '%' + key + '%'
                        }
                    },
                    {
                        lname: {
                            $like: '%' + key + '%'
                        }
                    }
                ]
            }
        });
        return _.ceil(count / pageSize);
    },

    async RejectOLR(olr_id, auth_user_id){
      return await models.db.olrs.update({
          current_status: 'Rejected',
          updated_by: auth_user_id,
          updated_on: new Date()
      }, {
          where: {
              olr_id: olr_id
          }
      });
    },
    async getEmpCode(object){
      let le_codes = await models.db.org_legal_entities.findAll(
        {
          where:{
            $or:[
              {le_id:object.pe_le_id},
              {le_id: object.payroll_le_id}
            ]
          }
      })
      let pe_le_code=null;
      let payroll_le_code=null;
      for(var i=0;i<le_codes.length;i++){
        if(object.pe_le_id == le_codes[i].le_id){
          pe_le_code = le_codes[i].le_code;
        }
        if(object.payroll_le_id == le_codes[i].le_id){
          payroll_le_code = le_codes[i].le_code;
        }
      }
      let max_pe_emp_code = await models.db.emp_codes.max(
        'uid', {
          where:{
            le_code:pe_le_code
          }
      })
      let max_emp_code = await models.db.emp_codes.max(
        'uid', {
          where:{
            le_code:payroll_le_code
          }
      })
      return {
        payroll_le_code: payroll_le_code,
        max_emp_code:max_emp_code || 10000,
        pe_le_code: pe_le_code,
        max_pe_emp_code:max_pe_emp_code || 10000
      }
    },

    async ApproveOLR(olr_id, auth_user_id){
      let olr = await models.db.olrs.findOne({
        where:{
          olr_id: olr_id
        }
      })
      let emp_codes = await FunctionList.getEmpCode(olr)
      console.log(emp_codes)
      let auth_user_obj = {
        display_name: olr.fname + " " + olr.lname,
        mobile: olr.mobile,
        username: olr.mobile,
        password:"hitech",
        is_active:1,
        created_by:auth_user_id,
        created_on: new Date(),
        updated_by:auth_user_id,
        updated_on: new Date()
      }
      let auth_user = await models.db.auth_users.findOne({
        where: {
          mobile: auth_user_obj.mobile
        }
      })
      if(!auth_user){
        console.log('creating auth_user')
        auth_user = await models.db.auth_users.create(auth_user_obj)
      }
      let uid = emp_codes.max_emp_code + 1
      let emp_code = emp_codes.payroll_le_code+"/"+uid;
      let pe_uid = uid;
      let pe_emp_code = emp_code;
      if(emp_codes.pe_le_code){
        pe_uid = emp_codes.max_pe_emp_code + 1
        pe_emp_code = emp_codes.pe_le_code+"/"+uid;
      }
      let emp_obj = {
        user_id: auth_user.user_id,
        le_id: olr.payroll_le_id,
        le_code: emp_codes.payroll_le_code,
        emp_code: emp_code,
        pe_emp_code: pe_emp_code,
        designation: olr.designation,
        is_offroll: olr.is_offroll,
        emp_type: olr.payroll_emp_type,
        dm_id: olr.payroll_dm,
        facility_id:olr.payroll_facility_id,
        pos_id: olr.payroll_pos_id,
        bu_id: olr.payroll_bu_id,
        DOJ: olr.DOJ,
        permanent_address: olr.permanent_address,
        correspondence_address: olr.correspondence_address,
        DOB: olr.DOB,
        fname: olr.fname,
        lname: olr.lname,
        display_name: olr.fname + " " + olr.lname,
        mobile: olr.mobile,
        mobile2: olr.mobile2,
        per_email: olr.per_email,
        aadhar_no: olr.aadhar_no,
        aadhar_file_url: olr.aadhar_file_url,
        base_location_city: olr.base_location_city,
        base_location_state: olr.base_location_state,
        base_location_pincode: olr.base_location_pincode,
        gender: olr.gender,
        fathers_name: olr.fathers_name,
        mothers_name: olr.mothers_name,
        marital_status: olr.marital_status,
        spouse_name: olr.spouse_name,
        is_active:1,
        created_by:auth_user_id,
        created_on: new Date(),
        updated_by:auth_user_id,
        updated_on: new Date(),
      }
      let emp = await models.db.employees.create(emp_obj)
      let emp_pe_obj = {
        emp_id: emp.emp_id,
        le_id: olr.pe_le_id,
        dm: olr.pe_dm,
        facility_id: olr.pe_facility_id,
        pos_id: olr.pe_pos_id,
        bu_id: olr.pe_bu_id,
        emp_code: pe_emp_code,
        emp_type: olr.emp_type,
        DOJ: olr.DOJ,
        is_active:1,
        created_by:auth_user_id,
        created_on: new Date(),
        updated_by:auth_user_id,
        updated_on: new Date(),
      }
      await models.db.employees_pe_details.create(emp_pe_obj)
      if(emp_codes.payroll_le_code){
        await models.db.emp_codes.create({
          emp_code: emp.emp_code,
          le_code: emp_codes.payroll_le_code,
          uid: uid,
          olr_id: olr_id
        })
      }
      if(emp_codes.pe_le_code){
        await models.db.emp_codes.create({
          emp_code: emp.pe_emp_code,
          le_code: emp_codes.pe_le_code,
          uid: pe_uid,
          olr_id: olr_id
        })
      }
      return await models.db.olrs.update({
          current_status: 'Approved',
          updated_by: auth_user_id,
          updated_on: new Date()
      }, {
          where: {
              olr_id: olr_id
          }
      });
      // return emp_codes
      // return await models.db.olrs.update({
      //     current_status: 'Approved',
      //     updated_by: auth_user_id,
      //     updated_on: new Date()
      // }, {
      //     where: {
      //         olr_id: olr_id
      //     }
      // });
    }
}

exports.fun = FunctionList;
