let models = require('sql-models');

let FunctionList = {

    async fetchMaster(options){
        // Table.findAll({
        //   attributes: ['id', ['first', 'firstName']] //id, first AS firstName
        // })
        // .then(function(posts) {
        //   res.json(posts);
        // });
        // console.log("options",options)
        // return []
        return await models.db[options.params.table].findAll({
            attributes: [[options.params.text_field, 'text'], [options.params.value_field, 'value']],
            distinct: true
        });
    },

    /** Generic System **/
    async getCSID({org_id, le_id}){
        return await models.db.csid.find({
            where: {
                le_id: parseInt(le_id), org_id: parseInt(org_id)
            }
        });
    },

    async createCSID({org_id, le_id}){
        return await models.db.csid.create({org_id, le_id});
    },

    async getMasters({csid}){
        return await models.db.master.findAll({
            where: {
                csid: parseInt(csid)
            }
        });
    },

    async createMaster({csid, code, title}){
        return await models.db.master.create({csid: parseInt(csid), code, title, generic: false});
    },

    async getHeader({master_id}){
        return await models.db.master_headers.findAll({where: {master_id: parseInt(master_id)}});
    },

    async createHeader({master_id, code, title, type, typeMasterId, typeMasterHeaderId}){
        return await models.db.master_headers.create({
            master_id: parseInt(master_id),
            code,
            title,
            header_type: type,
            typeMasterId: typeMasterId ? parseInt(typeMasterId) : undefined,
            typeMasterHeaderId: typeMasterHeaderId ? parseInt(typeMasterHeaderId) : undefined,
        });
    },

    async getEntry({master_id}){
        let headerIDs = await models.db.master_headers.findAll({
            attributes: ['id'],
            where: {master_id: parseInt(master_id)}
        });
        let headerIds = _.map(headerIDs, ({id}) => id);

        let data = await models.db.master_data.findAll({
            where: {
                header_id: {
                    $in: headerIds
                }
            }
        });
        return _.values(_.groupBy(data, data => data.row_id))
    },

    async createEntity(masterId, object, row_id){
        let newEntries = [];
        for (let key in object) {
            newEntries.push({
                header_id: parseInt(key),
                value: object[key],
                row_id
            })
        }
        return await models.db.master_data.bulkCreate(newEntries);
    },

    async getHeaderData({header_id, header_code}){
        if (header_id)
            return await models.db.master_data.findAll({
                where: {
                    header_id
                }
            });
        else {
            let masterHeader = await models.db.master_headers.find({
                where: {
                    code: header_code
                }
            });
            return await models.db.master_data.findAll({
                where: {
                    header_id: masterHeader.id
                }
            });
        }
    },

    async createEntry({value, row_id, header_id}){
        return await models.db.master_data.create({value, row_id: parseInt(row_id), header_id: parseInt(header_id)});
    }
};

exports.fun = FunctionList;
